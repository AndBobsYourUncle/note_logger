// Code generated by MockGen. DO NOT EDIT.
// Source: sqlite.go

// Package mock_sql is a generated GoMock package.
package mock_sql

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MocksqliteDBConn is a mock of sqliteDBConn interface
type MocksqliteDBConn struct {
	ctrl     *gomock.Controller
	recorder *MocksqliteDBConnMockRecorder
}

// MocksqliteDBConnMockRecorder is the mock recorder for MocksqliteDBConn
type MocksqliteDBConnMockRecorder struct {
	mock *MocksqliteDBConn
}

// NewMocksqliteDBConn creates a new mock instance
func NewMocksqliteDBConn(ctrl *gomock.Controller) *MocksqliteDBConn {
	mock := &MocksqliteDBConn{ctrl: ctrl}
	mock.recorder = &MocksqliteDBConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksqliteDBConn) EXPECT() *MocksqliteDBConnMockRecorder {
	return m.recorder
}

// Exec mocks base method
func (m *MocksqliteDBConn) Exec(query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MocksqliteDBConnMockRecorder) Exec(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MocksqliteDBConn)(nil).Exec), varargs...)
}
